{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["IScrollViewGesture","props","vertical","style","data","pagingEnabled","enableSnap","panGestureHandlerProps","loop","infinite","React","useContext","CTX","translation","onScrollBegin","onScrollEnd","size","maxPage","length","isHorizontal","touching","scrollEndTranslation","scrollEndVelocity","_withSpring","useCallback","toValue","onFinished","damping","isFinished","endWithSpring","origin","value","velocity","nextPage","Math","round","deceleration","page","velocityPage","finalPage","min","max","resetBoundary","onFinish","activeDecay","panGestureEventHandler","onStart","_","ctx","panOffset","onActive","e","translationX","translationY","panTranslation","onEnd","velocityX","velocityY","directionStyle","useMemo","styles","contentHorizontal","contentVertical","container","children","ScrollViewGesture","StyleSheet","create","flex","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport {\n    PanGestureHandler,\n    PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport Animated, {\n    cancelAnimation,\n    runOnJS,\n    useAnimatedGestureHandler,\n    useAnimatedReaction,\n    useDerivedValue,\n    useSharedValue,\n    withDecay,\n    withSpring,\n} from 'react-native-reanimated';\nimport { CTX } from './store';\n\ntype GestureContext = {\n    panOffset: number;\n    max: number;\n};\n\ninterface Props {\n    size: number;\n    infinite?: boolean;\n    onScrollEnd?: () => void;\n    onScrollBegin?: () => void;\n    style?: StyleProp<ViewStyle>;\n    translation: Animated.SharedValue<number>;\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n    const {\n        props: {\n            vertical,\n            style,\n            data,\n            pagingEnabled,\n            enableSnap,\n            panGestureHandlerProps,\n            loop: infinite,\n        },\n    } = React.useContext(CTX);\n\n    const { translation, onScrollBegin, onScrollEnd, size } = props;\n\n    const maxPage = data.length;\n    const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n    const touching = useSharedValue(false);\n    const scrollEndTranslation = useSharedValue(0);\n    const scrollEndVelocity = useSharedValue(0);\n\n    const _withSpring = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            return withSpring(\n                toValue,\n                {\n                    damping: 100,\n                },\n                (isFinished) => {\n                    if (isFinished) {\n                        onFinished?.();\n                    }\n                }\n            );\n        },\n        []\n    );\n\n    const endWithSpring = React.useCallback(\n        (onFinished?: () => void) => {\n            'worklet';\n            const origin = translation.value;\n            const velocity = scrollEndVelocity.value;\n            if (!pagingEnabled) {\n                if (enableSnap) {\n                    const nextPage =\n                        Math.round((origin + velocity * 0.4) / size) * size;\n                    translation.value = _withSpring(nextPage, onFinished);\n                    return;\n                }\n                translation.value = withDecay({\n                    velocity,\n                    deceleration: 0.999,\n                });\n                return;\n            }\n            const page = Math.round(-translation.value / size);\n            const velocityPage = Math.round(\n                -(translation.value + scrollEndVelocity.value) / size\n            );\n            let finalPage = Math.min(\n                page + 1,\n                Math.max(page - 1, velocityPage)\n            );\n            if (!infinite) {\n                finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n            }\n\n            translation.value = _withSpring(-finalPage * size, onFinished);\n        },\n        [\n            infinite,\n            _withSpring,\n            translation,\n            scrollEndVelocity,\n            size,\n            maxPage,\n            pagingEnabled,\n            enableSnap,\n        ]\n    );\n\n    const resetBoundary = React.useCallback(() => {\n        'worklet';\n        const onFinish = (isFinished: boolean) => {\n            if (isFinished) {\n                touching.value = false;\n                onScrollEnd && runOnJS(onScrollEnd)();\n            }\n        };\n        const activeDecay = () => {\n            touching.value = true;\n            translation.value = withDecay(\n                { velocity: scrollEndVelocity.value },\n                onFinish\n            );\n        };\n\n        if (touching.value) {\n            return;\n        }\n\n        if (translation.value > 0) {\n            if (scrollEndTranslation.value < 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(0);\n                return;\n            }\n        }\n\n        if (translation.value < -((maxPage - 1) * size)) {\n            if (scrollEndTranslation.value > 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(-((maxPage - 1) * size));\n                return;\n            }\n        }\n    }, [\n        infinite,\n        touching,\n        _withSpring,\n        translation,\n        scrollEndTranslation,\n        scrollEndVelocity,\n        onScrollEnd,\n        maxPage,\n        size,\n    ]);\n\n    useAnimatedReaction(\n        () => translation.value,\n        () => {\n            if (!pagingEnabled) {\n                resetBoundary();\n            }\n        },\n        [pagingEnabled]\n    );\n\n    const panGestureEventHandler = useAnimatedGestureHandler<\n        PanGestureHandlerGestureEvent,\n        GestureContext\n    >(\n        {\n            onStart: (_, ctx) => {\n                touching.value = true;\n                cancelAnimation(translation);\n                onScrollBegin && runOnJS(onScrollBegin)();\n                ctx.max = (maxPage - 1) * size;\n                ctx.panOffset = translation.value;\n            },\n            onActive: (e, ctx) => {\n                touching.value = true;\n                const { translationX, translationY } = e;\n                let panTranslation = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                if (\n                    !infinite &&\n                    (translation.value > 0 || translation.value < -ctx.max)\n                ) {\n                    panTranslation = panTranslation * 0.5;\n                }\n\n                translation.value = ctx.panOffset + panTranslation;\n            },\n            onEnd: (e) => {\n                const { velocityX, velocityY, translationX, translationY } = e;\n                scrollEndVelocity.value = isHorizontal.value\n                    ? velocityX\n                    : velocityY;\n                scrollEndTranslation.value = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                endWithSpring(() => onScrollEnd && runOnJS(onScrollEnd)());\n\n                if (!infinite) {\n                    touching.value = false;\n                }\n            },\n        },\n        [pagingEnabled, isHorizontal.value, infinite, maxPage, size, enableSnap]\n    );\n\n    const directionStyle = React.useMemo(() => {\n        return vertical ? styles.contentHorizontal : styles.contentVertical;\n    }, [vertical]);\n\n    return (\n        <Animated.View style={[styles.container, directionStyle, style]}>\n            <PanGestureHandler\n                {...panGestureHandlerProps}\n                onGestureEvent={panGestureEventHandler}\n            >\n                {props.children}\n            </PanGestureHandler>\n        </Animated.View>\n    );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'hidden',\n    },\n    contentVertical: {\n        flexDirection: 'column',\n    },\n    contentHorizontal: {\n        flexDirection: 'row',\n    },\n});\n"]}