{"version":3,"sources":["ParallaxLayout.tsx"],"names":["ParallaxLayout","props","handlerOffsetX","parallaxScrollingOffset","parallaxScrollingScale","index","width","height","loop","data","children","visibleRanges","vertical","shouldUpdate","setShouldUpdate","React","useState","size","x","offsetXStyle","value","translate","Extrapolate","EXTEND","zIndex","CLAMP","scale","Math","pow","transform","translateY","translateX","updateView","useCallback","negativeRange","positiveRange","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Animated, {\n    Extrapolate,\n    interpolate,\n    runOnJS,\n    useAnimatedReaction,\n    useAnimatedStyle,\n} from 'react-native-reanimated';\nimport type { ComputedDirectionTypes } from 'src/types';\nimport { useOffsetX } from '../hooks/useOffsetX';\nimport type { IVisibleRanges } from '../hooks/useVisibleRanges';\nimport { LazyView } from '../LazyView';\n\nexport const ParallaxLayout: React.FC<\n    ComputedDirectionTypes<{\n        loop?: boolean;\n        parallaxScrollingOffset?: number;\n        parallaxScrollingScale?: number;\n        handlerOffsetX: Animated.SharedValue<number>;\n        index: number;\n        data: unknown[];\n        visibleRanges: IVisibleRanges;\n    }>\n> = (props) => {\n    const {\n        handlerOffsetX,\n        parallaxScrollingOffset = 100,\n        parallaxScrollingScale = 0.8,\n        index,\n        width,\n        height,\n        loop,\n        data,\n        children,\n        visibleRanges,\n        vertical,\n    } = props;\n\n    const [shouldUpdate, setShouldUpdate] = React.useState(false);\n\n    const size = props.vertical ? props.height : props.width;\n\n    const x = useOffsetX(\n        {\n            handlerOffsetX,\n            index,\n            size,\n            data,\n            loop,\n        },\n        visibleRanges\n    );\n\n    const offsetXStyle = useAnimatedStyle(() => {\n        const value = x.value / size;\n\n        const translate = interpolate(\n            value,\n            [-1, 0, 1],\n            [\n                -size + parallaxScrollingOffset,\n                0,\n                size - parallaxScrollingOffset,\n            ],\n            Extrapolate.EXTEND\n        );\n\n        const zIndex = interpolate(\n            value,\n            [-1, 0, 1],\n            [0, size, 0],\n            Extrapolate.CLAMP\n        );\n\n        const scale = interpolate(\n            value,\n            [-1, 0, 1],\n            [\n                Math.pow(parallaxScrollingScale, 2),\n                parallaxScrollingScale,\n                Math.pow(parallaxScrollingScale, 2),\n            ],\n            Extrapolate.CLAMP\n        );\n\n        return {\n            transform: [\n                vertical\n                    ? {\n                          translateY: translate,\n                      }\n                    : {\n                          translateX: translate,\n                      },\n                {\n                    scale,\n                },\n            ],\n            zIndex,\n        };\n    }, [loop, vertical, parallaxScrollingOffset]);\n\n    const updateView = React.useCallback(\n        (negativeRange: number[], positiveRange: number[]) => {\n            setShouldUpdate(\n                (index >= negativeRange[0] && index <= negativeRange[1]) ||\n                    (index >= positiveRange[0] && index <= positiveRange[1])\n            );\n        },\n        [index]\n    );\n\n    useAnimatedReaction(\n        () => visibleRanges.value,\n        () => {\n            runOnJS(updateView)(\n                visibleRanges.value.negativeRange,\n                visibleRanges.value.positiveRange\n            );\n        },\n        [visibleRanges.value]\n    );\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    width: width || '100%',\n                    height: height || '100%',\n                    position: 'absolute',\n                },\n                offsetXStyle,\n            ]}\n        >\n            <LazyView shouldUpdate={shouldUpdate}>{children}</LazyView>\n        </Animated.View>\n    );\n};\n"]}