{"version":3,"sources":["BaseLayout.tsx"],"names":["BaseLayout","props","handlerOffsetX","index","children","visibleRanges","animationStyle","context","React","useContext","CTX","loop","data","width","height","vertical","customConfig","mode","modeConfig","size","shouldUpdate","setShouldUpdate","useState","offsetXConfig","snapDirection","showLength","type","viewCount","x","animationValue","value","animatedStyle","updateView","useCallback","negativeRange","positiveRange","position"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type { ViewStyle } from 'react-native';\nimport Animated, {\n    runOnJS,\n    useAnimatedReaction,\n    useAnimatedStyle,\n    useDerivedValue,\n} from 'react-native-reanimated';\nimport { IOpts, useOffsetX } from '../hooks/useOffsetX';\nimport type { IVisibleRanges } from '../hooks/useVisibleRanges';\nimport { LazyView } from '../LazyView';\nimport { CTX } from '../store';\nimport type { ILayoutConfig } from './stack';\n\nexport type TAnimationStyle = (\n    value: number\n) => Animated.AnimatedStyleProp<ViewStyle>;\n\nexport const BaseLayout: React.FC<{\n    index: number;\n    handlerOffsetX: Animated.SharedValue<number>;\n    visibleRanges: IVisibleRanges;\n    animationStyle: TAnimationStyle;\n    children: (ctx: {\n        animationValue: Animated.SharedValue<number>;\n    }) => React.ReactElement;\n}> = (props) => {\n    const { handlerOffsetX, index, children, visibleRanges, animationStyle } =\n        props;\n\n    const context = React.useContext(CTX);\n    const {\n        props: {\n            loop,\n            data,\n            width,\n            height,\n            vertical,\n            customConfig,\n            mode,\n            modeConfig,\n        },\n    } = context;\n    const size = vertical ? height : width;\n    const [shouldUpdate, setShouldUpdate] = React.useState(false);\n    let offsetXConfig: IOpts = {\n        handlerOffsetX,\n        index,\n        size,\n        data,\n        loop,\n        ...(typeof customConfig === 'function' ? customConfig() : {}),\n    };\n\n    if (mode === 'horizontal-stack') {\n        const { snapDirection, showLength } = modeConfig as ILayoutConfig;\n\n        offsetXConfig = {\n            handlerOffsetX,\n            index,\n            size,\n            data,\n            loop,\n            type: snapDirection === 'right' ? 'negative' : 'positive',\n            viewCount: showLength,\n        };\n    }\n\n    const x = useOffsetX(offsetXConfig, visibleRanges);\n    const animationValue = useDerivedValue(() => x.value / size, [x, size]);\n    const animatedStyle = useAnimatedStyle(\n        () => animationStyle(x.value / size),\n        [animationStyle]\n    );\n\n    const updateView = React.useCallback(\n        (negativeRange: number[], positiveRange: number[]) => {\n            setShouldUpdate(\n                (index >= negativeRange[0] && index <= negativeRange[1]) ||\n                    (index >= positiveRange[0] && index <= positiveRange[1])\n            );\n        },\n        [index]\n    );\n\n    useAnimatedReaction(\n        () => visibleRanges.value,\n        () => {\n            runOnJS(updateView)(\n                visibleRanges.value.negativeRange,\n                visibleRanges.value.positiveRange\n            );\n        },\n        [visibleRanges.value]\n    );\n\n    return (\n        <Animated.View\n            style={[\n                {\n                    width: width || '100%',\n                    height: height || '100%',\n                    position: 'absolute',\n                },\n                animatedStyle,\n            ]}\n        >\n            <LazyView shouldUpdate={shouldUpdate}>\n                {children({ animationValue })}\n            </LazyView>\n        </Animated.View>\n    );\n};\n"]}