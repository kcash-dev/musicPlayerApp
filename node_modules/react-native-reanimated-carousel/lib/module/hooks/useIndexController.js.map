{"version":3,"sources":["useIndexController.ts"],"names":["React","useSharedValue","useIndexController","opts","originalLength","length","size","loop","handlerOffsetX","onChange","index","sharedIndex","useRef","sharedPreIndex","convertToSharedIndex","useCallback","i","computedIndex","current","toInt","value","Math","abs","_sharedIndex","getCurrentIndex"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAAmBC,cAAnB,QAAyC,yBAAzC;AAWA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAQc;AACjB,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,MAAlB;AAA0BC,IAAAA,IAA1B;AAAgCC,IAAAA,IAAhC;AAAsCC,IAAAA,cAAtC;AAAsDC,IAAAA;AAAtD,MACFN,IADJ;AAEA,QAAMO,KAAK,GAAGT,cAAc,CAAS,CAAT,CAA5B,CAHiB,CAIjB;;AACA,QAAMU,WAAW,GAAGX,KAAK,CAACY,MAAN,CAAqB,CAArB,CAApB;AACA,QAAMC,cAAc,GAAGb,KAAK,CAACY,MAAN,CAAqB,CAArB,CAAvB;AAEA,QAAME,oBAAoB,GAAGd,KAAK,CAACe,WAAN,CACxBC,CAAD,IAAe;AACX,QAAIT,IAAJ,EAAU;AACN,cAAQH,cAAR;AACI,aAAK,CAAL;AACI,iBAAO,CAAP;;AACJ,aAAK,CAAL;AACI,iBAAOY,CAAC,GAAG,CAAX;AAJR;AAMH;;AACD,WAAOA,CAAP;AACH,GAXwB,EAYzB,CAACZ,cAAD,EAAiBG,IAAjB,CAZyB,CAA7B;AAeA,QAAMU,aAAa,GAAGjB,KAAK,CAACe,WAAN,CAAkB,MAAM;AAC1CF,IAAAA,cAAc,CAACK,OAAf,GAAyBP,WAAW,CAACO,OAArC;AACA,UAAMC,KAAK,GAAIX,cAAc,CAACY,KAAf,GAAuBd,IAAxB,GAAgCD,MAA9C;AACA,UAAMW,CAAC,GACHR,cAAc,CAACY,KAAf,IAAwB,CAAxB,GACMC,IAAI,CAACC,GAAL,CAASH,KAAT,CADN,GAEME,IAAI,CAACC,GAAL,CAASH,KAAK,GAAG,CAAR,GAAYd,MAAM,GAAGc,KAArB,GAA6B,CAAtC,CAHV;AAIAT,IAAAA,KAAK,CAACU,KAAN,GAAcJ,CAAd;;AACA,UAAMO,YAAY,GAAGT,oBAAoB,CAACE,CAAD,CAAzC;;AACAL,IAAAA,WAAW,CAACO,OAAZ,GAAsBK,YAAtB;AACAd,IAAAA,QAAQ,CAACc,YAAD,CAAR;AACH,GAXqB,EAWnB,CACClB,MADD,EAECG,cAFD,EAGCK,cAHD,EAICH,KAJD,EAKCJ,IALD,EAMCK,WAND,EAOCG,oBAPD,EAQCL,QARD,CAXmB,CAAtB;AAsBA,QAAMe,eAAe,GAAGxB,KAAK,CAACe,WAAN,CAAkB,MAAM;AAC5C,WAAOL,KAAK,CAACU,KAAb;AACH,GAFuB,EAErB,CAACV,KAAD,CAFqB,CAAxB;AAIA,SAAO;AACHA,IAAAA,KADG;AAEHL,IAAAA,MAFG;AAGHM,IAAAA,WAHG;AAIHE,IAAAA,cAJG;AAKHI,IAAAA,aALG;AAMHO,IAAAA;AANG,GAAP;AAQH","sourcesContent":["import * as React from 'react';\nimport Animated, { useSharedValue } from 'react-native-reanimated';\n\nexport interface IIndexController {\n    length: number;\n    sharedPreIndex: React.MutableRefObject<number>;\n    sharedIndex: React.MutableRefObject<number>;\n    index: Animated.SharedValue<number>;\n    computedIndex: () => void;\n    getCurrentIndex: () => number;\n}\n\nexport function useIndexController(opts: {\n    handlerOffsetX: Animated.SharedValue<number>;\n    loop: boolean;\n    // the length before fill data\n    originalLength: number;\n    length: number;\n    size: number;\n    onChange: (index: number) => void;\n}): IIndexController {\n    const { originalLength, length, size, loop, handlerOffsetX, onChange } =\n        opts;\n    const index = useSharedValue<number>(0);\n    // The Index displayed to the user\n    const sharedIndex = React.useRef<number>(0);\n    const sharedPreIndex = React.useRef<number>(0);\n\n    const convertToSharedIndex = React.useCallback(\n        (i: number) => {\n            if (loop) {\n                switch (originalLength) {\n                    case 1:\n                        return 0;\n                    case 2:\n                        return i % 2;\n                }\n            }\n            return i;\n        },\n        [originalLength, loop]\n    );\n\n    const computedIndex = React.useCallback(() => {\n        sharedPreIndex.current = sharedIndex.current;\n        const toInt = (handlerOffsetX.value / size) % length;\n        const i =\n            handlerOffsetX.value <= 0\n                ? Math.abs(toInt)\n                : Math.abs(toInt > 0 ? length - toInt : 0);\n        index.value = i;\n        const _sharedIndex = convertToSharedIndex(i);\n        sharedIndex.current = _sharedIndex;\n        onChange(_sharedIndex);\n    }, [\n        length,\n        handlerOffsetX,\n        sharedPreIndex,\n        index,\n        size,\n        sharedIndex,\n        convertToSharedIndex,\n        onChange,\n    ]);\n\n    const getCurrentIndex = React.useCallback(() => {\n        return index.value;\n    }, [index]);\n\n    return {\n        index,\n        length,\n        sharedIndex,\n        sharedPreIndex,\n        computedIndex,\n        getCurrentIndex,\n    };\n}\n"]}