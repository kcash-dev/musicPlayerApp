{"version":3,"sources":["ScrollViewGesture.tsx"],"names":["React","StyleSheet","PanGestureHandler","Animated","cancelAnimation","runOnJS","useAnimatedGestureHandler","useAnimatedReaction","useDerivedValue","useSharedValue","withDecay","withSpring","CTX","IScrollViewGesture","props","vertical","style","data","pagingEnabled","enableSnap","panGestureHandlerProps","loop","infinite","useContext","translation","onScrollBegin","onScrollEnd","size","maxPage","length","isHorizontal","touching","scrollEndTranslation","scrollEndVelocity","_withSpring","useCallback","toValue","onFinished","damping","isFinished","endWithSpring","origin","value","velocity","nextPage","Math","round","deceleration","page","velocityPage","finalPage","min","max","resetBoundary","onFinish","activeDecay","panGestureEventHandler","onStart","_","ctx","panOffset","onActive","e","translationX","translationY","panTranslation","onEnd","velocityX","velocityY","directionStyle","useMemo","styles","contentHorizontal","contentVertical","container","children","ScrollViewGesture","create","flex","overflow","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { StyleProp, StyleSheet, ViewStyle } from 'react-native';\nimport {\n    PanGestureHandler,\n    PanGestureHandlerGestureEvent,\n} from 'react-native-gesture-handler';\nimport Animated, {\n    cancelAnimation,\n    runOnJS,\n    useAnimatedGestureHandler,\n    useAnimatedReaction,\n    useDerivedValue,\n    useSharedValue,\n    withDecay,\n    withSpring,\n} from 'react-native-reanimated';\nimport { CTX } from './store';\n\ntype GestureContext = {\n    panOffset: number;\n    max: number;\n};\n\ninterface Props {\n    size: number;\n    infinite?: boolean;\n    onScrollEnd?: () => void;\n    onScrollBegin?: () => void;\n    style?: StyleProp<ViewStyle>;\n    translation: Animated.SharedValue<number>;\n}\n\nconst IScrollViewGesture: React.FC<Props> = (props) => {\n    const {\n        props: {\n            vertical,\n            style,\n            data,\n            pagingEnabled,\n            enableSnap,\n            panGestureHandlerProps,\n            loop: infinite,\n        },\n    } = React.useContext(CTX);\n\n    const { translation, onScrollBegin, onScrollEnd, size } = props;\n\n    const maxPage = data.length;\n    const isHorizontal = useDerivedValue(() => !vertical, [vertical]);\n    const touching = useSharedValue(false);\n    const scrollEndTranslation = useSharedValue(0);\n    const scrollEndVelocity = useSharedValue(0);\n\n    const _withSpring = React.useCallback(\n        (toValue: number, onFinished?: () => void) => {\n            'worklet';\n            return withSpring(\n                toValue,\n                {\n                    damping: 100,\n                },\n                (isFinished) => {\n                    if (isFinished) {\n                        onFinished?.();\n                    }\n                }\n            );\n        },\n        []\n    );\n\n    const endWithSpring = React.useCallback(\n        (onFinished?: () => void) => {\n            'worklet';\n            const origin = translation.value;\n            const velocity = scrollEndVelocity.value;\n            if (!pagingEnabled) {\n                if (enableSnap) {\n                    const nextPage =\n                        Math.round((origin + velocity * 0.4) / size) * size;\n                    translation.value = _withSpring(nextPage, onFinished);\n                    return;\n                }\n                translation.value = withDecay({\n                    velocity,\n                    deceleration: 0.999,\n                });\n                return;\n            }\n            const page = Math.round(-translation.value / size);\n            const velocityPage = Math.round(\n                -(translation.value + scrollEndVelocity.value) / size\n            );\n            let finalPage = Math.min(\n                page + 1,\n                Math.max(page - 1, velocityPage)\n            );\n            if (!infinite) {\n                finalPage = Math.min(maxPage - 1, Math.max(0, finalPage));\n            }\n\n            translation.value = _withSpring(-finalPage * size, onFinished);\n        },\n        [\n            infinite,\n            _withSpring,\n            translation,\n            scrollEndVelocity,\n            size,\n            maxPage,\n            pagingEnabled,\n            enableSnap,\n        ]\n    );\n\n    const resetBoundary = React.useCallback(() => {\n        'worklet';\n        const onFinish = (isFinished: boolean) => {\n            if (isFinished) {\n                touching.value = false;\n                onScrollEnd && runOnJS(onScrollEnd)();\n            }\n        };\n        const activeDecay = () => {\n            touching.value = true;\n            translation.value = withDecay(\n                { velocity: scrollEndVelocity.value },\n                onFinish\n            );\n        };\n\n        if (touching.value) {\n            return;\n        }\n\n        if (translation.value > 0) {\n            if (scrollEndTranslation.value < 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(0);\n                return;\n            }\n        }\n\n        if (translation.value < -((maxPage - 1) * size)) {\n            if (scrollEndTranslation.value > 0) {\n                activeDecay();\n                return;\n            }\n            if (!infinite) {\n                translation.value = _withSpring(-((maxPage - 1) * size));\n                return;\n            }\n        }\n    }, [\n        infinite,\n        touching,\n        _withSpring,\n        translation,\n        scrollEndTranslation,\n        scrollEndVelocity,\n        onScrollEnd,\n        maxPage,\n        size,\n    ]);\n\n    useAnimatedReaction(\n        () => translation.value,\n        () => {\n            if (!pagingEnabled) {\n                resetBoundary();\n            }\n        },\n        [pagingEnabled]\n    );\n\n    const panGestureEventHandler = useAnimatedGestureHandler<\n        PanGestureHandlerGestureEvent,\n        GestureContext\n    >(\n        {\n            onStart: (_, ctx) => {\n                touching.value = true;\n                cancelAnimation(translation);\n                onScrollBegin && runOnJS(onScrollBegin)();\n                ctx.max = (maxPage - 1) * size;\n                ctx.panOffset = translation.value;\n            },\n            onActive: (e, ctx) => {\n                touching.value = true;\n                const { translationX, translationY } = e;\n                let panTranslation = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                if (\n                    !infinite &&\n                    (translation.value > 0 || translation.value < -ctx.max)\n                ) {\n                    panTranslation = panTranslation * 0.5;\n                }\n\n                translation.value = ctx.panOffset + panTranslation;\n            },\n            onEnd: (e) => {\n                const { velocityX, velocityY, translationX, translationY } = e;\n                scrollEndVelocity.value = isHorizontal.value\n                    ? velocityX\n                    : velocityY;\n                scrollEndTranslation.value = isHorizontal.value\n                    ? translationX\n                    : translationY;\n\n                endWithSpring(() => onScrollEnd && runOnJS(onScrollEnd)());\n\n                if (!infinite) {\n                    touching.value = false;\n                }\n            },\n        },\n        [pagingEnabled, isHorizontal.value, infinite, maxPage, size, enableSnap]\n    );\n\n    const directionStyle = React.useMemo(() => {\n        return vertical ? styles.contentHorizontal : styles.contentVertical;\n    }, [vertical]);\n\n    return (\n        <Animated.View style={[styles.container, directionStyle, style]}>\n            <PanGestureHandler\n                {...panGestureHandlerProps}\n                onGestureEvent={panGestureEventHandler}\n            >\n                {props.children}\n            </PanGestureHandler>\n        </Animated.View>\n    );\n};\n\nexport const ScrollViewGesture = IScrollViewGesture;\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        overflow: 'hidden',\n    },\n    contentVertical: {\n        flexDirection: 'column',\n    },\n    contentHorizontal: {\n        flexDirection: 'row',\n    },\n});\n"]}